# -*- coding: utf-8 -*-
"""railways_data_set.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uOVC8Sq5zKKJdfEDFmTUyzt56K8h6PiG
"""

# Importing required libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Step 1: datset
from google.colab import files
uploaded = files.upload()  # This will prompt you to upload the CSV file

data = pd.read_csv(next(iter(uploaded)))

print("Dataset preview:")
print(data.head(5))

# Step 3: Data Cleaning
# Check for missing values
print("\nMissing Values:")
print(data.isnull().sum())

data.dropna(inplace=True) #drop null values

# Fill or drop missing values (example: fill with mean for numeric columns)
for column in data.columns:
    if data[column].dtype in ['float64', 'int64']:  # Numeric columns
        data[column].fillna(data[column].mean(), inplace=True)

print("\nAfter Cleaning Missing Values:")
print(data.isnull().sum())

# Inspect the DataFrame
print("DataFrame preview:")
print(data.head())

# Check data types
print("\nData Types:")
print(data.dtypes)

# Select numeric columns
numeric_data = data.select_dtypes(include=['float64', 'int64'])
print("\nNumeric Data preview:")
print(numeric_data.head())

# Check if numeric_data is empty
if numeric_data.empty:
    print("No numeric columns found in the data!")
else:
    # Compute and print correlation matrix
    correlation_matrix = numeric_data.corr()
    print("\nCorrelation Matrix:")
    print(correlation_matrix)

# Step 5: Visualize the Correlation Matrix with a Heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm", fmt=".2f", linewidths=0.5)
plt.title("Correlation Heatmap of Railway Data")
plt.show()

"""#column name debug"""

# Check the column names in your dataset
print("Column Names in Dataset:")
print(data.columns)

# Remove extra spaces or formatting issues in column names
data.columns = data.columns.str.strip()  # Strip leading/trailing spaces
data.columns = data.columns.str.replace("\s+", " ", regex=True)  # Normalize spaces

# Display cleaned column names
print("\nCleaned Column Names:")
print(data.columns)

# Verify column names before proceeding with analysis
required_columns = [
    'Broad Gauge-Net Load - (Tonnes)',
    'Broad Gauge-Gross Load - inc.weight - of engine - (Tonnes)',
    'Metre Gauge-Net Load - (Tonnes)',
    'Metre Gauge - Gross Load - inc.weight - of engine - (Tonnes)'
]

# Ensure all required columns exist
for col in required_columns:
    if col not in data.columns:
        print(f"Column Missing: {col}")

# Proceed if columns exist
try:
    # Aggregated metrics
    broad_net_load = data['Broad Gauge-Net Load - (Tonnes)'].mean()
    broad_gross_load = data['Broad Gauge-Gross Load - inc.weight - of engine - (Tonnes)'].mean()
    metre_net_load = data['Metre Gauge-Net Load - (Tonnes)'].mean()
    metre_gross_load = data['Metre Gauge - Gross Load - inc.weight - of engine - (Tonnes)'].mean()

    # Create a DataFrame for aggregated loads
    aggregated_data = pd.DataFrame({
        'Gauge': ['Broad', 'Metre'],
        'Average Net Load': [broad_net_load, metre_net_load],
        'Average Gross Load': [broad_gross_load, metre_gross_load]
    })

    print("\nAggregated Data for Visualization:")
    print(aggregated_data)

    # Bar chart to compare net and gross loads
    plt.figure(figsize=(10, 6))
    sns.barplot(data=aggregated_data.melt(id_vars='Gauge',
                                          var_name='Load Type',
                                          value_name='Load'),
                x='Gauge', y='Load', hue='Load Type', palette='viridis')
    plt.title("Comparison of Net and Gross Loads between Broad and Metre Gauges")
    plt.ylabel("Load (Tonnes)")
    plt.tight_layout()
    plt.show()

except KeyError as e:
    print(f"KeyError: {e}. Please verify the column names in your dataset.")

#debug 1
# Print column names with their exact lengths
print("Column Names and Their Lengths:")
for col in data.columns:
    print(f"'{col}' - Length: {len(col)}")

# Check for differences using list comprehension
print("\nDifferences Detected in Column Names:")
for col in data.columns:
    if "Broad Gauge-Net Load - (Tonnes)" in col:
        print(f"Matched: '{col}'")
    else:
        print(f"Unmatched: '{col}'")

#debug2
#After identifying the exact column names, rename them for consistency:
# Rename columns manually to fix any discrepancies
data.rename(columns={
    'Broad Gauge- Net Load - (Tonnes)': 'Broad Gauge-Net Load - (Tonnes)',
    'Broad Gauge-Gross Load - inc.weight - of engine - (Tonnes)': 'Broad Gauge-Gross Load',
    'Metre Gauge-Net Load - (Tonnes)': 'Metre Gauge-Net Load',
    'Metre Gauge - Gross Load - inc.weight - of engine - (Tonnes)': 'Metre Gauge-Gross Load'
}, inplace=True)

print("\nRenamed Columns:")
print(data.columns)

#debug3
#final/validaation
# Aggregated metrics
broad_net_load = data['Broad Gauge-Net Load - (Tonnes)'].mean()
broad_gross_load = data['Broad Gauge-Gross Load'].mean()
metre_net_load = data['Metre Gauge-Net Load'].mean()
metre_gross_load = data['Metre Gauge-Gross Load'].mean()

# Create a DataFrame for aggregated loads
aggregated_data = pd.DataFrame({
    'Gauge': ['Broad', 'Metre'],
    'Average Net Load': [broad_net_load, metre_net_load],
    'Average Gross Load': [broad_gross_load, metre_gross_load]
})

# Bar chart to compare net and gross loads
plt.figure(figsize=(10, 6))
sns.barplot(data=aggregated_data.melt(id_vars='Gauge',
                                      var_name='Load Type',
                                      value_name='Load'),
            x='Gauge', y='Load', hue='Load Type', palette='viridis')
plt.title("Comparison of Net and Gross Loads between Broad and Metre Gauges")
plt.ylabel("Load (Tonnes)")
plt.tight_layout()
plt.show()

"""Column Length Debugging: Detect subtle differences in column names.
Manual Renaming: Standardize column names using data.rename().
Invisible Characters: Watch for characters like \u00a0 (non-breaking spaces) or extra tabs.
"""

#Trend Load over years
plt.figure(figsize=(10, 6))
sns.lineplot(data=data, x='Year', y='Broad Gauge-Net Load - (Tonnes)', label='Broad Gauge - Net Load', color='blue')
sns.lineplot(data=data, x='Year', y='Metre Gauge-Net Load - (Tonnes)', label='Metre Gauge - Net Load', color='orange')
sns.lineplot(data=data, x='Year', y='Broad Gauge-Gross Load', label='Broad Gauge - Gross Load', color='blue', linestyle="--")
sns.lineplot(data=data, x='Year', y='Metre Gauge-Gross Load', label='Metre Gauge - Gross Load', color='orange', linestyle="--")
plt.title("Net and Gross Load Trends Over Years")
plt.xlabel("Year")
plt.ylabel("Load (Tonnes)")
plt.legend()
plt.grid(True)
plt.show()

# Plot for Broad Gauge: Net and Gross Load over years
plt.figure(figsize=(10, 6))
sns.lineplot(data=data, x='Year', y='Broad Gauge-Net Load - (Tonnes)', label='Broad Gauge - Net Load', color='blue', marker='o')
sns.lineplot(data=data, x='Year', y='Broad Gauge-Gross Load', label='Broad Gauge - Gross Load', color='blue', linestyle="--", marker='o')
plt.title("Broad Gauge - Net and Gross Load Trends Over Years")
plt.xlabel("Year")
plt.ylabel("Load (Tonnes)")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()